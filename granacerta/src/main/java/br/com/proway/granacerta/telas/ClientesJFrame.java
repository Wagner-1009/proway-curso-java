/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.proway.granacerta.telas;

import br.com.proway.granacerta.bancodadosGranaCerta.BancoDadosUtil;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author wagne
 */
public class ClientesJFrame extends javax.swing.JFrame {
    
    private final DefaultTableModel modeloTabela;
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(ClientesJFrame.class.getName());
    private int idEditar;

    /**
     * Creates new form ClientesJFrame
     */
    public ClientesJFrame() {
        initComponents();
        //pegar o medelo do jtable das contas fazendo um
        //cast para defaultTableModel1
        modeloTabela = (DefaultTableModel) jTableClientes.getModel();
        //idEditar começa com -1 pq é o modo de cadastro
        idEditar = -1;
        consultarClientes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelNome = new javax.swing.JLabel();
        jLabelCnpj = new javax.swing.JLabel();
        jFormattedTextFieldCnpj = new javax.swing.JFormattedTextField();
        jTextFieldNome = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableClientes = new javax.swing.JTable();
        jButtonApagar = new javax.swing.JButton();
        jButtonEditar = new javax.swing.JButton();
        jButtonSalvar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelNome.setText("Nome:");

        jLabelCnpj.setText("CNPJ:");

        jTableClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id:", "Nome:", "CNPJ:"
            }
        ));
        jScrollPane1.setViewportView(jTableClientes);

        jButtonApagar.setText("Apagar");
        jButtonApagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApagarActionPerformed(evt);
            }
        });

        jButtonEditar.setText("Editar");
        jButtonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarActionPerformed(evt);
            }
        });

        jButtonSalvar.setText("Salvar");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });

        jButtonCancelar.setText("Cancelar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(123, 123, 123)
                                .addComponent(jButtonCancelar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonSalvar))
                            .addComponent(jLabelCnpj, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelNome, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNome, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jFormattedTextFieldCnpj, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 266, Short.MAX_VALUE)
                        .addComponent(jButtonEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonApagar)
                        .addGap(28, 28, 28))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabelNome)
                        .addGap(32, 32, 32)
                        .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jLabelCnpj)
                        .addGap(27, 27, 27)
                        .addComponent(jFormattedTextFieldCnpj, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonSalvar)
                            .addComponent(jButtonCancelar)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(9, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonApagar)
                            .addComponent(jButtonEditar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void formWindowClosed(java.awt.event.WindowEvent evt) {                                  
    var home = new HomeContasJFrame();
    home.setVisible(true);  

} 
    private void jButtonApagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonApagarActionPerformed
        String sql = "DELETE FROM clientes WHERE id = ?";
        
        int indiceLinhaSelecionada = jTableClientes.getSelectedRow();
        idEditar = Integer.parseInt(modeloTabela.getValueAt(indiceLinhaSelecionada, 0).toString());
        
        try (Connection conexao = BancoDadosUtil.getConnection()){
            PreparedStatement preparadorDeSQL = conexao.prepareStatement(sql);
            preparadorDeSQL.setInt(1, idEditar);
            preparadorDeSQL.execute();
            JOptionPane.showMessageDialog(null, "Conta apagada com sucesso");
            consultarClientes();
            idEditar = -1;
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Não foi possivel apagar o cliente");
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonApagarActionPerformed

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed
        String nome = jTextFieldNome.getText();
        String cnpj = jFormattedTextFieldCnpj.getText();
        
        if(idEditar == -1){
            cadastrarCliente(nome, cnpj);
        }else{
            editarCliente(nome, cnpj);
        }
    }//GEN-LAST:event_jButtonSalvarActionPerformed
    private void cadastrarCliente(String nome, String cnpj){
        String sql= "INSERT INTO clientes (nome, cnpj) VALUES (?,?)";
        try(Connection conexao = BancoDadosUtil.getConnection()){
            PreparedStatement preparadorDeSQL = conexao.prepareStatement(sql);
            preparadorDeSQL.setString(1, nome);
            preparadorDeSQL.setString(2, cnpj);
            preparadorDeSQL.setInt(3, idEditar);
            preparadorDeSQL.execute();
            JOptionPane.showMessageDialog(null, "Cliente cadastrado com sucesso!");
            limparCampos();
            consultarClientes();
            
        }catch (Exception e){
            JOptionPane.showMessageDialog(null, "Não foi possivel cadastrar o cliente");
            e.printStackTrace();
        }
    }
    
    private void editarCliente(String nome, String cnpj){
            String sql = "UPDATE clientes SET nome = ?, cnpj = ? WHERE id = ?";
            try(Connection conexao = BancoDadosUtil.getConnection()){
                PreparedStatement preparadorSQL = conexao.prepareStatement(sql);
                preparadorSQL.setString(1, nome);
                preparadorSQL.setString(2, cnpj);
                preparadorSQL.setInt(3, idEditar);
                preparadorSQL.execute();
                limparCampos();
                consultarClientes();
                JOptionPane.showMessageDialog(null, "Cliente alterado com sucesso!");
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, "Não foi possível alterar o cliente");
                e.printStackTrace();
            }
        }
         
    private void jButtonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarActionPerformed
                String sql = "SELECT nome, cnpj FROM clientes WHERE id = ?";
        
        int indiceLinhaSelecionada = jTableClientes.getSelectedRow();
        idEditar = Integer.parseInt(modeloTabela.getValueAt(indiceLinhaSelecionada, 0).toString());
        
        try (Connection conexao = BancoDadosUtil.getConnection()){
            PreparedStatement preparadorDeSQL = conexao.prepareStatement(sql);
            preparadorDeSQL.setInt(1, idEditar);
            preparadorDeSQL.execute();
            ResultSet registros = preparadorDeSQL.getResultSet();
            //retorna uma lista, nesse caso dos registros
            
            if(registros.next()){
                String nome = registros.getString("nome");
                String cnpj = registros.getString("cnpj");
                jTextFieldNome.setText(nome);
                jFormattedTextFieldCnpj.setText(String.valueOf(cnpj).replace(".", ","));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Não foi possivel consultar a conta");
            e.printStackTrace();
        }

    }//GEN-LAST:event_jButtonEditarActionPerformed
   
   

    private void consultarClientes(){
        try(Connection conexao = BancoDadosUtil.getConnection()){
            String sql = "SELECT id, nome, cnpj FROM clientes";
            Statement executorSql = conexao.createStatement();
            executorSql.execute(sql);
            ResultSet registros = executorSql.getResultSet();
            modeloTabela.setRowCount(0);
            while(registros.next()){
                int id = registros.getInt("id");
                String nome = registros.getString("nome");
                String cnpj = registros.getString("cnpj");
                modeloTabela.addRow(new Object[] {id , nome, cnpj});
                
            }
                
            
        }catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Não foi possível consultar as contas");
        }
        
}
    
        private void limparCampos(){
        jTextFieldNome.setText("");
        jFormattedTextFieldCnpj.setText("");
        idEditar = -1;
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonApagar;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonEditar;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JFormattedTextField jFormattedTextFieldCnpj;
    private javax.swing.JLabel jLabelCnpj;
    private javax.swing.JLabel jLabelNome;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableClientes;
    private javax.swing.JTextField jTextFieldNome;
    // End of variables declaration//GEN-END:variables
}
